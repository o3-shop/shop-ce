name: PR Quality Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  qa:
    name: Run tests and code style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: php-cs-fixer
          coverage: none
          extensions: mbstring, intl, pdo, sqlite

      - name: Validate Composer
        run: |
          if [ -f composer.json ]; then composer validate --no-check-publish --strict; fi

      - name: Install dependencies
        if: hashFiles('composer.lock') != ''
        uses: ramsey/composer-install@v3
        with:
          composer-options: --no-progress --prefer-dist --no-interaction

      - name: Install dependencies (no lockfile)
        if: hashFiles('composer.lock') == '' && hashFiles('composer.json') != ''
        run: composer install --no-progress --prefer-dist --no-interaction

      - name: Run PHPUnit
        id: phpunit
        continue-on-error: true
        shell: bash
        run: |
          set -o pipefail
          LOG=phpunit.log
          if [ -x vendor/bin/phpunit ]; then
            vendor/bin/phpunit --testdox 2>&1 | tee "$LOG"
            CODE=${PIPESTATUS[0]}
          else
            echo "vendor/bin/phpunit not found or not executable" | tee "$LOG"
            CODE=127
          fi
          echo "log_path=$LOG" >> "$GITHUB_OUTPUT"
          echo "exit_code=$CODE" >> "$GITHUB_OUTPUT"
          exit 0

      - name: Run php-cs-fixer (dry-run)
        id: phpcsfixer
        continue-on-error: true
        shell: bash
        run: |
          set -o pipefail
          LOG=php_cs_fixer.log
          if command -v php-cs-fixer >/dev/null 2>&1; then
            php-cs-fixer fix . --dry-run --diff --format=txt 2>&1 | tee "$LOG"
            CODE=${PIPESTATUS[0]}
          else
            echo "php-cs-fixer not available" | tee "$LOG"
            CODE=127
          fi
          echo "log_path=$LOG" >> "$GITHUB_OUTPUT"
          echo "exit_code=$CODE" >> "$GITHUB_OUTPUT"
          exit 0

      - name: Build QA summary comment
        id: summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            function readTail(path, lines) {
              try {
                const data = fs.readFileSync(path, 'utf8');
                const arr = data.split(/\r?\n/);
                const tail = arr.slice(-lines).join('\n');
                return tail.trim();
              } catch (e) {
                return `Cannot read ${path}: ${e.message}`;
              }
            }

            const phpunitExit = Number(process.env.PHPUNIT_EXIT || core.getInput('phpunit-exit')) || Number('${{ steps.phpunit.outputs.exit_code || 1 }}');
            const phpcsExit   = Number(process.env.PHPCS_EXIT   || core.getInput('phpcs-exit'))   || Number('${{ steps.phpcsfixer.outputs.exit_code || 1 }}');

            const phpunitLog = readTail('${{ steps.phpunit.outputs.log_path }}', 80);
            const phpcsLog   = readTail('${{ steps.phpcsfixer.outputs.log_path }}', 80);

            const ok = (code) => code === 0;
            const statusIcon = (code) => ok(code) ? '✅' : '❌';

            const body = [
              '### PR QA Report',
              '',
              `${statusIcon(phpunitExit)} PHPUnit: ${ok(phpunitExit) ? 'Passed' : 'Failed'} (exit ${phpunitExit})`,
              `${statusIcon(phpcsExit)} php-cs-fixer: ${ok(phpcsExit) ? 'Clean' : 'Issues found'} (exit ${phpcsExit})`,
              '',
              '<details><summary>PHPUnit log (tail)</summary>\n\n',
              '```',
              phpunitLog || '(empty)',
              '```',
              '\n</details>',
              '',
              '<details><summary>php-cs-fixer log (tail)</summary>\n\n',
              '```',
              phpcsLog || '(empty)',
              '```',
              '\n</details>',
              '',
              '_This is an automated report; re-run checks by pushing new commits._'
            ].join('\n');

            core.setOutput('body', body);

      - name: Create or update PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const header = '### PR QA Report';
            const body = `${{ toJSON(steps.summary.outputs.body) }}`;
            const prNumber = context.payload.pull_request.number;

            // Find existing comment by this bot containing the header
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              per_page: 100,
            });

            const botId = context.actor;
            const existing = comments.find(c => c.user && c.user.type === 'Bot' && c.body && c.body.includes(header));

            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body,
              });
            }



