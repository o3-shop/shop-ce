name: PHP Tests

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      db:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: o3shop
          MYSQL_USER: o3shop
          MYSQL_PASSWORD: o3shop
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y \
            libjpeg-dev \
            libpng-dev \
            libfreetype6-dev \
            libxml2-dev \
            libcurl4-openssl-dev \
            libonig-dev \
            libzip-dev \
            libssl-dev \
            zlib1g-dev \
            libicu-dev \
            libxslt1-dev \
            libbz2-dev \
            libreadline-dev \
            g++ \
            unzip \
            git \
            nano \
            wget \
            default-mysql-client

      - name: Setup PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: pdo, pdo_mysql, mysqli, gd, mbstring, curl, bcmath, soap, bz2, intl, opcache, calendar, exif, zip
          tools: composer:2.2
          ini-values: |
            date.timezone=Europe/Berlin
            memory_limit=11000M
            upload_max_filesize=100M
            post_max_size=100M
            error_reporting=E_ALL
            display_errors=On
            log_errors=On
            error_log=/tmp/php_errors.log

      - name: Create environment file
        run: |
          cp .env.ci .env

      - name: Wait for MySQL to be ready
        run: |
          until mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot --silent; do
            echo 'Waiting for MySQL to be ready...'
            sleep 2
          done
          echo 'MySQL is ready!'

      - name: Install theme
        run: |
          GREEN='\033[0;32m'
          BLUE='\033[0;34m'
          YELLOW='\033[1;33m'
          RED='\033[0;31m'
          NC='\033[0m' # No Color
          CURRENT_DIR=$(pwd)
          echo "Current directory: $CURRENT_DIR"
          echo "${YELLOW}Installing Wave theme...${NC}"
    
          # Check if theme is already installed
          if [ -d "source/Application/views/wave" ] && [ "$(ls -A source/Application/views/wave)" ]; then
            echo "Wave theme appears to be already installed, skipping"
            return 0
          fi
    
          # Download theme
          echo "Downloading theme from GitHub..."
          wget -q https://github.com/o3-shop/wave-theme/archive/refs/heads/main.zip -O main.zip || handle_error "Failed to download theme"
    
          # Extract theme
          echo "Extracting theme..."
          unzip -q main.zip || handle_error "Failed to extract theme archive"
    
          # Copy theme files
          echo "Copying theme files to appropriate directories..."
          mkdir -p source/out/ || handle_error "Failed to create out directory"
          cp -r wave-theme-main/out/* source/out/ || handle_error "Failed to copy theme out files"
    
          mkdir -p source/Application/views/wave || handle_error "Failed to create theme views directory"
          rm -rf wave-theme-main/out
          cp -r wave-theme-main/* source/Application/views/wave || handle_error "Failed to copy theme view files"
    
          # Clean up
          echo "Cleaning up temporary files..."
          rm -rf wave-theme-main
          rm main.zip
    
          echo "${GREEN}Wave theme installed successfully${NC}"

      - name: Run tests
        env:
          O3SHOP_CONF_DBHOST: 127.0.0.1
          O3SHOP_CONF_DBNAME: o3shop
          O3SHOP_CONF_DBUSER: o3shop
          O3SHOP_CONF_DBPWD: o3shop
          O3SHOP_CONF_DBROOT: root
        run: |
          chmod +x ./run-tests.sh
          ./run-tests.sh
