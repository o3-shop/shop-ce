name: Code Quality & Tests

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

jobs:
  cs-fixer:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: üêò Setup PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: ‚¨áÔ∏è Download PHP-CS-Fixer
        run: |
          wget -q https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases/download/v3.66.0/php-cs-fixer.phar -O php-cs-fixer.phar
          chmod +x php-cs-fixer.phar
          sudo mv php-cs-fixer.phar /usr/local/bin/php-cs-fixer

      - name: ‚ÑπÔ∏è Show PHP-CS-Fixer version
        run: php-cs-fixer --version

      - name: üíÖ Run Code Style Check (PHP-CS-Fixer)
        id: cs_check
        run: php-cs-fixer check
        continue-on-error: true

      - name: üí¨ Comment on PR if style check fails
        if: ${{ failure() && github.event_name == 'pull_request' }}
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            Please check the code style. The PHP-CS-Fixer check failed.
          comment_tag: cs-style-check

      - name: üî¥ Fail if code style check failed
        if: steps.cs_check.outcome == 'failure'
        run: exit 1

  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version: ['7.4', '8.0', '8.1', '8.2']
      fail-fast: false

    services:
      mariadb:
        image: mariadb:10.10
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: o3shop_test
          MYSQL_USER: o3shop
          MYSQL_PASSWORD: o3shop
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: üêò Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, xml, ctype, json, tokenizer, pdo, pdo_mysql, mysqli
          coverage: pcov

      - name: ‚¨áÔ∏è Install Composer 2.2
        run: |
          echo "::group::Install Composer"
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          php composer-setup.php --version=2.2.21
          php -r "unlink('composer-setup.php');"
          sudo mv composer.phar /usr/local/bin/composer
          composer --version
          echo "::endgroup::"

      - name: üè∑ Set Dynamic Composer Root Version
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH_NAME="${{ github.head_ref }}"
          fi
          if [[ "$BRANCH_NAME" == "main" ]]; then
            VERSION="1.4.x-dev"
          elif [[ "$BRANCH_NAME" == *"1.4"* ]]; then
            VERSION="1.4.x-dev"
          elif [[ "$BRANCH_NAME" == *"1.3"* ]]; then
            VERSION="1.3.x-dev"
          else
            VERSION="1.4.x-dev"
          fi
          echo "COMPOSER_ROOT_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using version: $VERSION"

      - name: üì¶ Cache Composer Dependencies
        id: composer-cache
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php-version }}-

      - name: üîß Copy CI Config Files
        run: |
          cp .env.ci .env
          cp source/config.inc.php.dist source/config.inc.php

      - name: üì• Install Dependencies
        env:
          COMPOSER_ROOT_VERSION: ${{ env.COMPOSER_ROOT_VERSION }}
        run: |
          echo "::group::Composer Install"
          composer install --prefer-dist --no-progress
          echo "::endgroup::"
          echo "::group::Apt Intall"
          sudo apt-get update
          sudo apt-get install -y libxml2-utils 
          echo "::endgroup::"

      - name: üé® Install Wave Theme
        run: |
          echo "::group::Wave Theme Installation"
          if [ -d "source/Application/views/wave" ] && [ "$(ls -A source/Application/views/wave)" ]; then
            echo "Wave theme already installed, skipping"
            exit 0
          fi
          wget -q https://github.com/o3-shop/wave-theme/archive/refs/heads/main.zip -O main.zip
          unzip -q main.zip
          mkdir -p source/out/
          cp -r wave-theme-main/out/* source/out/
          mkdir -p source/Application/views/wave
          rm -rf wave-theme-main/out
          cp -r wave-theme-main/* source/Application/views/wave
          rm -rf wave-theme-main main.zip
          echo "Wave theme installed"
          echo "::endgroup::"

      - name: ‚è≥ Wait for MariaDB (Ready Check)
        run: |
          until mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot --silent; do
            echo 'Waiting for MariaDB...'
            sleep 1
          done

      - name: üóÑÔ∏è Create Test Database
        run: mysql -h 127.0.0.1 -P 3306 -u root -proot -e "CREATE DATABASE IF NOT EXISTS o3shop_test;"

      - name: ‚úÖ Run PHPUnit (with Coverage)
        id: phpunit
        continue-on-error: true
        run: |
          echo "::group::PHPUnit"
          CURRENT_DIR=$(pwd)
          php $CURRENT_DIR/vendor/bin/phpunit \
            --bootstrap $CURRENT_DIR/vendor/o3-shop/testing-library/bootstrap.php \
            -c $CURRENT_DIR/tests/phpunit.xml \
            $CURRENT_DIR/tests/Unit \
            --colors=always \
            --coverage-clover="$CURRENT_DIR/coverage.xml" \
            --coverage-html="$CURRENT_DIR/coverage-html/" \
            --log-junit="$CURRENT_DIR/junit.xml"
          echo "::endgroup::"

      - name: ‚òÅÔ∏è Upload Coverage Report (HTML)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-php-${{ matrix.php-version }}
          path: coverage-html/

      - name: üìù Parse Failed Tests
        id: parse_failed_tests
        run: |
          if [ -f junit.xml ]; then
            FAILURES=$(xmllint --xpath "count(//testcase[failure])" junit.xml 2>/dev/null || echo "0")
            ERROR_OUTPUT=$(
              xmllint --xpath '//testcase[failure]/..' junit.xml 2>/dev/null | tr '\n' ' ' | perl -ne '
              while (/<testcase\b([^>]*)>/g) {
              my $attr = $1;
              my ($class) = $attr =~ /\bclass="([^"]*)"/;
              my ($name)  = $attr =~ /\bname="([^"]*)"/;
              print "$class"."::"."$name\n" if $class && $name;
            }
              '
            )

            echo "FAILURES=$FAILURES"
            echo "ERROR_OUTPUT=$ERROR_OUTPUT"
             if [ "$FAILURES" -gt 0 ]; then
                echo "FAILED_TESTS=$ERROR_OUTPUT" >> $GITHUB_ENV
                echo "TESTS_FAILED=true" >> $GITHUB_ENV
              else
                echo "FAILED_TESTS=" >> $GITHUB_ENV
                echo "TESTS_FAILED=false" >> $GITHUB_ENV
              fi
            else
              echo "FAILED_TESTS=" >> $GITHUB_ENV
              echo "TESTS_FAILED=false" >> $GITHUB_ENV
            fi

      - name: üìù Generate Coverage Summary
        run: |
          if [ -f coverage.xml ]; then
            COVERAGE=$(php -r "
              \$xml = simplexml_load_file('coverage.xml');
              \$metrics = \$xml->project->metrics;
              \$covered = (int)\$metrics['coveredstatements'];
              \$total = (int)\$metrics['statements'];
              \$percentage = \$total > 0 ? round((\$covered / \$total) * 100, 2) : 0;
              echo \$percentage;
            ")
            echo "## Coverage Report (PHP ${{ matrix.php-version }})" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage: ${COVERAGE}%**" >> $GITHUB_STEP_SUMMARY
            echo "COVERAGE_PERCENTAGE=${COVERAGE}" >> $GITHUB_ENV
          else
            echo "No coverage file found"
          fi

      - name: üí° Add failed test summary if not PR
        if: env.TESTS_FAILED == 'true' && github.event_name != 'pull_request'
        run: |
          echo "## ‚ùå Some PHPUnit tests failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '${{ env.FAILED_TESTS }}' >> $GITHUB_STEP_SUMMARY

      - name: üí¨ Comment Coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const coverage = process.env.COVERAGE_PERCENTAGE;
            if (coverage) {
              const body = `## üìä Coverage Report (PHP ${{ matrix.php-version }})

              **Coverage: ${coverage}%**

              ${coverage >= 80 ? '‚úÖ Great coverage!' : coverage >= 60 ? '‚ö†Ô∏è Coverage could be improved' : '‚ùå Low coverage'}

              [View detailed coverage report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

      - name: üí¨ Comment failed tests on PR
        if: env.TESTS_FAILED == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const failed = process.env.FAILED_TESTS || 'Unable to parse failures.';
            const body = `‚ùå **Some PHPUnit tests failed**:
            
            '${failed}'
            
            
            Please check your tests.`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: üî¥ Fail if tests failed
        if: env.TESTS_FAILED == 'true'
        run: exit 1